// <auto-generated />
using System;
using JricaStudioWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JricaStudioWebApi.Migrations
{
    [DbContext(typeof(JaysLashesDbContext))]
    [Migration("20250303234756_add time to blockout Date Table")]
    partial class addtimetoblockoutDateTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdminKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResetKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResetKeySent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("895b8598-ce49-4b18-94a8-806ecfc9f283"),
                            AdminKey = new Guid("1d9f0c95-62cc-42de-a3c6-28dad362017d"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 363, DateTimeKind.Utc).AddTicks(6976),
                            FirstName = "Jayrica",
                            LastName = "Cunanan",
                            Password = "$2a$11$U0y.ukVPaWDwAgfy2GCNqurr9Dp33.oJ/yghVxYPeGqbOWhR15iwy",
                            Phone = "0422453888",
                            ResetKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            ResetKeySent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "jricastudio@gmail.com"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHadEyelashExtentions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDepositPaid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSampleSetComplete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SampleSetCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.BlockOutDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockOutDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97ab2988-1e28-41d2-a207-05280b73c64f"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9262),
                            Date = new DateOnly(2025, 3, 5),
                            EndTime = new TimeOnly(0, 0, 0),
                            StartTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("26a9bd0f-f587-4bf8-ac29-78f368312721"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9287),
                            Date = new DateOnly(2025, 3, 7),
                            EndTime = new TimeOnly(0, 0, 0),
                            StartTime = new TimeOnly(0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2e6f82e1-1042-447f-b510-bb62c5f294ef"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9298),
                            Date = new DateOnly(2025, 3, 9),
                            EndTime = new TimeOnly(0, 0, 0),
                            StartTime = new TimeOnly(0, 0, 0)
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.BusinessHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AfterHoursGraceRange")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LocalTimeOffset")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessHours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1ff44f6-b889-44f4-ac60-42e25b44eb74"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8658),
                            Day = 0,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f86c60dd-c1d8-4222-bde7-3f69101557fb"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8697),
                            Day = 1,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("15adfcdf-f01b-4693-9041-6975da0c2e87"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8707),
                            Day = 2,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("755b8754-403b-408a-95eb-0a4bb318a97c"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8717),
                            Day = 3,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b7e6faff-000f-4b34-9bed-23b534aaabcf"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8727),
                            Day = 4,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1e0c0441-8153-470c-915c-d9e464e51720"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8738),
                            Day = 5,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a71e6f0c-a2fe-49f1-86c9-4fe287a5d32f"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8748),
                            Day = 6,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ImageUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImageUploads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50ced4a5-af31-489e-840b-e33aabca814a"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7765),
                            FileName = "TestImage0",
                            StoredFileName = "2njo3fl0.43m"
                        },
                        new
                        {
                            Id = new Guid("892cf801-8a68-4c81-8635-441dc81a0ff9"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7814),
                            FileName = "TestImage1",
                            StoredFileName = "4fchlbk2.rya"
                        },
                        new
                        {
                            Id = new Guid("12083513-d677-4c80-b4e1-663a5efe861d"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7828),
                            FileName = "TestImage2",
                            StoredFileName = "bdoiftgs.rax"
                        },
                        new
                        {
                            Id = new Guid("2757aad8-cafc-4d31-b3f5-f9d03b0d320f"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7840),
                            FileName = "TestImage3",
                            StoredFileName = "bqkge5do.iss"
                        },
                        new
                        {
                            Id = new Guid("179c7307-69fd-4fe1-ac15-b7dddf5ca7c4"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7881),
                            FileName = "TestImage4",
                            StoredFileName = "e1uaxcux.m1n"
                        },
                        new
                        {
                            Id = new Guid("20c81532-37f9-4b58-b583-c3d1c50b8571"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7896),
                            FileName = "TestImage5",
                            StoredFileName = "k3u5m2si.spe"
                        },
                        new
                        {
                            Id = new Guid("5474364a-a628-45ab-809e-2c70737a3986"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7911),
                            FileName = "TestImage6",
                            StoredFileName = "tmbf3kzl.zwn"
                        },
                        new
                        {
                            Id = new Guid("915295a6-e48f-431b-aced-adcbabcdc229"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7922),
                            FileName = "TestImage7",
                            StoredFileName = "wcf3svy4.jnn"
                        },
                        new
                        {
                            Id = new Guid("bf7cbcd1-3a49-47a6-aa68-56100a5713ff"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7934),
                            FileName = "TestImage8",
                            StoredFileName = "ynyhyfjf.yym"
                        },
                        new
                        {
                            Id = new Guid("9aa8ab3e-82b7-42a5-97ba-cf46540d548e"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(7945),
                            FileName = "TestImage9",
                            StoredFileName = "yuyzgysh.wjy"
                        },
                        new
                        {
                            Id = new Guid("3c9b8e19-b924-420f-9c6d-8c348b72ec56"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8354),
                            FileName = "TestImage0",
                            StoredFileName = "jvkwqnf2.mre"
                        },
                        new
                        {
                            Id = new Guid("752d2923-ab54-42ab-944c-074d26740a63"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8369),
                            FileName = "TestImage1",
                            StoredFileName = "ohtn2czj.s4o"
                        },
                        new
                        {
                            Id = new Guid("35b79c9f-25c7-4987-a74d-d6370e2f1b5f"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8408),
                            FileName = "TestImage2",
                            StoredFileName = "oz1c3ma1.kd1"
                        },
                        new
                        {
                            Id = new Guid("d82b2772-eef8-4137-9e07-53b3b65d63cb"),
                            ContentType = "image",
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8418),
                            FileName = "TestImage3",
                            StoredFileName = "ttt312ik.ffr"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyArticle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("877d2702-f0e2-4a99-8032-ee69e9b5aae1"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8848),
                            Description = "Description",
                            ImageUploadId = new Guid("3c9b8e19-b924-420f-9c6d-8c348b72ec56"),
                            Name = "Aveeno Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("267dcea7-cc40-403f-a256-562b2c051617"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("8d10ab2c-03a1-4164-a1cb-44ea2b17feae"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8911),
                            Description = "Description",
                            ImageUploadId = new Guid("752d2923-ab54-42ab-944c-074d26740a63"),
                            Name = "Vaseline Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("267dcea7-cc40-403f-a256-562b2c051617"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("7e6497df-2c88-420e-9a94-055cc058fa19"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8924),
                            Description = "Description",
                            ImageUploadId = new Guid("3c9b8e19-b924-420f-9c6d-8c348b72ec56"),
                            Name = "Nivea Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("267dcea7-cc40-403f-a256-562b2c051617"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("cc881505-7ff6-46b7-9bd8-c3ac68feea8a"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8937),
                            Description = "Description",
                            ImageUploadId = new Guid("35b79c9f-25c7-4987-a74d-d6370e2f1b5f"),
                            Name = "Curel Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("267dcea7-cc40-403f-a256-562b2c051617"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("cca8cc78-05e5-4c7d-966c-c4a2a67a2d18"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8950),
                            Description = "Description",
                            ImageUploadId = new Guid("3c9b8e19-b924-420f-9c6d-8c348b72ec56"),
                            Name = "Classic Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("f704d750-eda8-40c8-b854-07b62f2ad985"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("d294f357-b641-42a1-9ef2-bcbd1bfad3d3"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8963),
                            Description = "Description",
                            ImageUploadId = new Guid("752d2923-ab54-42ab-944c-074d26740a63"),
                            Name = "Volume Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("f704d750-eda8-40c8-b854-07b62f2ad985"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("8f213f86-02e8-4067-b3c6-b3006300de6b"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(8976),
                            Description = "Description",
                            ImageUploadId = new Guid("752d2923-ab54-42ab-944c-074d26740a63"),
                            Name = "Wet Look Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("f704d750-eda8-40c8-b854-07b62f2ad985"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("9c437b3b-b25c-4be2-ab62-5184630b3af0"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9012),
                            Description = "Description",
                            ImageUploadId = new Guid("752d2923-ab54-42ab-944c-074d26740a63"),
                            Name = "3D Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("f704d750-eda8-40c8-b854-07b62f2ad985"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f704d750-eda8-40c8-b854-07b62f2ad985"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("267dcea7-cc40-403f-a256-562b2c051617"),
                            Name = "Lotion"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductShowcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("715a3cae-8159-4911-b2c1-61101cd4dd23"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9317),
                            ProductId = new Guid("cca8cc78-05e5-4c7d-966c-c4a2a67a2d18")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfd655b0-a064-4633-b8da-050d95a5cca2"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9038),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("12083513-d677-4c80-b4e1-663a5efe861d"),
                            Name = "2D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("06938412-ff7a-4a1b-a462-6d9d51eb6a1b"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9070),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("20c81532-37f9-4b58-b583-c3d1c50b8571"),
                            Name = "3D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("2dd37c42-d712-4592-98cd-10cbf42876de"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9084),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("5474364a-a628-45ab-809e-2c70737a3986"),
                            Name = "4D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("d32e7942-6d68-40b4-814f-f24fc9b3567a"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9098),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("50ced4a5-af31-489e-840b-e33aabca814a"),
                            Name = "5D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("4630994f-f6b8-44cd-8172-4d3cb4ef4e68"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9111),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("2757aad8-cafc-4d31-b3f5-f9d03b0d320f"),
                            Name = "6D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("a840afc0-6632-4c6b-adc7-417e8248fb18"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9124),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("2757aad8-cafc-4d31-b3f5-f9d03b0d320f"),
                            Name = "7D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("ca04967c-8818-4fb5-9904-e4faec1d4faa"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9137),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("892cf801-8a68-4c81-8635-441dc81a0ff9"),
                            Name = "8D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("d56db7e9-51db-42ff-a2e2-81f194394120"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9150),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("892cf801-8a68-4c81-8635-441dc81a0ff9"),
                            Name = "9D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("44d3af12-6c29-4f52-8758-64b2a765efc4"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9163),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("5474364a-a628-45ab-809e-2c70737a3986"),
                            Name = "10D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9")
                        },
                        new
                        {
                            Id = new Guid("b66cc7ce-c72d-4651-be48-75dd752a144a"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9175),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("892cf801-8a68-4c81-8635-441dc81a0ff9"),
                            Name = "Classic Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("3718b242-5a0c-4064-813a-aa290b13e9f9")
                        },
                        new
                        {
                            Id = new Guid("6d4c6e87-3713-4458-82f6-28d9ff3fea3a"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9188),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("5474364a-a628-45ab-809e-2c70737a3986"),
                            Name = "Volume Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("3718b242-5a0c-4064-813a-aa290b13e9f9")
                        },
                        new
                        {
                            Id = new Guid("1d1ff609-6468-4dd1-bccd-7756c60b3685"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9200),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("892cf801-8a68-4c81-8635-441dc81a0ff9"),
                            Name = "Classic Eye Brow lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("3718b242-5a0c-4064-813a-aa290b13e9f9")
                        },
                        new
                        {
                            Id = new Guid("414270ed-e553-4511-b73f-d10e196068e8"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9214),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("915295a6-e48f-431b-aced-adcbabcdc229"),
                            Name = "Volume Eye Brow Lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("3718b242-5a0c-4064-813a-aa290b13e9f9")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98b7ef20-87a3-4f5a-851c-0f62d9ccacc9"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("3718b242-5a0c-4064-813a-aa290b13e9f9"),
                            Name = "Eye Brow Shaping"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceShowCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a7f6d04-7941-4640-a712-f8ccf8fe7fd9"),
                            Created = new DateTime(2025, 3, 3, 23, 47, 54, 454, DateTimeKind.Utc).AddTicks(9235),
                            ServiceId = new Guid("cfd655b0-a064-4633-b8da-050d95a5cca2")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasHadEyeProblems4Weeks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSensitiveSkin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaiverAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WearsContanctLenses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentProduct", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.Product", "Product")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentService", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Products")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductShowcase", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Services")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceShowCase", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentProducts");

                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ImageUpload", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.Navigation("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}

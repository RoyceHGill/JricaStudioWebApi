// <auto-generated />
using System;
using JricaStudioWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JricaStudioWebApi.Migrations
{
    [DbContext(typeof(JaysLashesDbContext))]
    [Migration("20241206231227_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("JricaStudioWebApi.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdminKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResetKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResetKeySent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e215b7ec-cbdd-4def-b725-923f9b9039d6"),
                            AdminKey = new Guid("38c84c24-053c-4048-9b9b-0d8de1c3dedd"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(8185),
                            FirstName = "Jayrica",
                            LastName = "Cunanan",
                            Password = "$2a$11$NaqiA/4EAJS1LAYYtomE7ua5Tca/LzgEdNWkf4mhvSO96WkaXhqKi",
                            Phone = "0422453888",
                            ResetKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            ResetKeySent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "jricastudio@gmail.com"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHadEyelashExtentions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDepositPaid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSampleSetComplete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SampleSetCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.BlockOutDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockOutDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a837d76-9c2a-4ef4-aeae-f11900222002"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2912),
                            Date = new DateOnly(2024, 12, 8)
                        },
                        new
                        {
                            Id = new Guid("2c2cae69-b661-4791-a0a5-4b718fe9aecf"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2942),
                            Date = new DateOnly(2024, 12, 10)
                        },
                        new
                        {
                            Id = new Guid("db0f1aed-40b4-4088-a38c-c7a029954d89"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2953),
                            Date = new DateOnly(2024, 12, 12)
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.BusinessHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AfterHoursGraceRange")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LocalTimeOffset")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessHours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9581bbe2-a03b-4106-8ded-ce109fd06f9a"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2172),
                            Day = 0,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("753665a4-5632-46f3-a1db-d317ed9d54c6"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2250),
                            Day = 1,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("724a9dca-5ebd-475e-844c-ea2e05348393"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2268),
                            Day = 2,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("32879885-13c8-4b57-8a32-3b2f5772a3e8"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2334),
                            Day = 3,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("f829f97f-e42f-42fb-bf21-680d16c956b0"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2346),
                            Day = 4,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("a1faae47-2df9-4691-80e5-5890e3491661"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2360),
                            Day = 5,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("3f35f6d0-38b6-4caf-a4bd-91326a5bbf48"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2372),
                            Day = 6,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ImageUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImageUploads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23af1909-3f86-4552-9ef0-621040ff871d"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7344),
                            FileName = "TestImage0",
                            StoredFileName = "02lelb20.kxu"
                        },
                        new
                        {
                            Id = new Guid("ed8ed240-de82-4de1-8402-8f395e9809ca"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7385),
                            FileName = "TestImage1",
                            StoredFileName = "1wfiyggv.ogz"
                        },
                        new
                        {
                            Id = new Guid("a1f6884b-df7a-44e0-90a1-9b53e118286e"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7397),
                            FileName = "TestImage2",
                            StoredFileName = "4yyj3byq.m42"
                        },
                        new
                        {
                            Id = new Guid("1a81c961-5317-412c-b8f1-56a7bc03389e"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7409),
                            FileName = "TestImage3",
                            StoredFileName = "5grsbly1.vvs"
                        },
                        new
                        {
                            Id = new Guid("98a0171e-1371-47de-988b-1dc003f42af5"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7422),
                            FileName = "TestImage4",
                            StoredFileName = "dlgyvmbi.gcs"
                        },
                        new
                        {
                            Id = new Guid("fad508da-35c7-4add-8a8c-8f4546c69234"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7434),
                            FileName = "TestImage5",
                            StoredFileName = "mo3lni30.ymi"
                        },
                        new
                        {
                            Id = new Guid("dbe2cf7d-e5a6-417f-84f7-ac52b1a7e1f2"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7478),
                            FileName = "TestImage6",
                            StoredFileName = "oca4ntjt.ttx"
                        },
                        new
                        {
                            Id = new Guid("e1757882-fdaa-417b-911b-28c36be5fea0"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7491),
                            FileName = "TestImage7",
                            StoredFileName = "qvxqk2ty.x1t"
                        },
                        new
                        {
                            Id = new Guid("19f0ec31-cb78-4ba6-8879-4db92ff6a371"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7504),
                            FileName = "TestImage8",
                            StoredFileName = "slblntjp.01y"
                        },
                        new
                        {
                            Id = new Guid("39641fdb-4b32-414d-9dc5-1d0fb0cd9e96"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(7518),
                            FileName = "TestImage9",
                            StoredFileName = "vhqpmyj4.d3y"
                        },
                        new
                        {
                            Id = new Guid("a91610de-8235-438b-a2d7-9b98525208b6"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(8082),
                            FileName = "TestImage0",
                            StoredFileName = "bfbh030y.uon"
                        },
                        new
                        {
                            Id = new Guid("d7ec3b7c-0a6b-4575-b593-8b2cf46b77d4"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(8103),
                            FileName = "TestImage1",
                            StoredFileName = "pl4hh1jm.ngy"
                        },
                        new
                        {
                            Id = new Guid("1517f614-a450-4512-b8f5-d4ea04e12694"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(8113),
                            FileName = "TestImage2",
                            StoredFileName = "r4ewrbw4.dsb"
                        },
                        new
                        {
                            Id = new Guid("0a19d267-8ca2-4acc-ba4f-364fe7e08d7b"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(8160),
                            FileName = "TestImage3",
                            StoredFileName = "yc50xtod.5qs"
                        },
                        new
                        {
                            Id = new Guid("e25d1754-1c0c-4a44-854e-6ad4ba5d54ef"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 12, 26, 925, DateTimeKind.Utc).AddTicks(8171),
                            FileName = "TestImage4",
                            StoredFileName = "z02np4ox.2jp"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyArticle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7b00ac4-383a-4231-914d-f4a97458f617"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2495),
                            Description = "Description",
                            ImageUploadId = new Guid("a91610de-8235-438b-a2d7-9b98525208b6"),
                            Name = "Aveeno Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("5775e093-6fee-433a-925e-41ad0dcbdd1f"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("ac747f6a-032e-49be-9465-77af5ace3950"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2556),
                            Description = "Description",
                            ImageUploadId = new Guid("1517f614-a450-4512-b8f5-d4ea04e12694"),
                            Name = "Vaseline Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("5775e093-6fee-433a-925e-41ad0dcbdd1f"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("77dd84da-66a6-49ff-b557-43a962e54779"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2570),
                            Description = "Description",
                            ImageUploadId = new Guid("1517f614-a450-4512-b8f5-d4ea04e12694"),
                            Name = "Nivea Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("5775e093-6fee-433a-925e-41ad0dcbdd1f"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("204f0be3-9327-4392-adf3-db324efbc3a1"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2585),
                            Description = "Description",
                            ImageUploadId = new Guid("1517f614-a450-4512-b8f5-d4ea04e12694"),
                            Name = "Curel Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("5775e093-6fee-433a-925e-41ad0dcbdd1f"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("dd4cefd0-7dfd-43ae-8c09-69b0296eb951"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2598),
                            Description = "Description",
                            ImageUploadId = new Guid("1517f614-a450-4512-b8f5-d4ea04e12694"),
                            Name = "Classic Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("30c2731a-10a6-4f85-8eed-514cd13caea0"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("d1596535-dd8f-40c8-b645-3e1583c37a14"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2611),
                            Description = "Description",
                            ImageUploadId = new Guid("a91610de-8235-438b-a2d7-9b98525208b6"),
                            Name = "Volume Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("30c2731a-10a6-4f85-8eed-514cd13caea0"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("016a974e-4509-48ce-8783-4eb0ae615056"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2624),
                            Description = "Description",
                            ImageUploadId = new Guid("a91610de-8235-438b-a2d7-9b98525208b6"),
                            Name = "Wet Look Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("30c2731a-10a6-4f85-8eed-514cd13caea0"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("0d1d6d5c-ebdb-4388-acf1-6c92788c59ff"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2636),
                            Description = "Description",
                            ImageUploadId = new Guid("0a19d267-8ca2-4acc-ba4f-364fe7e08d7b"),
                            Name = "3D Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("30c2731a-10a6-4f85-8eed-514cd13caea0"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30c2731a-10a6-4f85-8eed-514cd13caea0"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("5775e093-6fee-433a-925e-41ad0dcbdd1f"),
                            Name = "Lotion"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductShowcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2f1c228-d700-47c7-98b5-ddefded757bd"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2977),
                            ProductId = new Guid("dd4cefd0-7dfd-43ae-8c09-69b0296eb951")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("29d10e4f-6e9d-44b6-8e41-4d90215e4a4e"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2665),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("23af1909-3f86-4552-9ef0-621040ff871d"),
                            Name = "2D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("4542cbfd-cd65-4f32-92f1-63d0b7d913a7"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2698),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("1a81c961-5317-412c-b8f1-56a7bc03389e"),
                            Name = "3D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("a831753b-0cea-4438-82fe-af11c14fb1e1"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2711),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a1f6884b-df7a-44e0-90a1-9b53e118286e"),
                            Name = "4D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("00286ba5-8cf4-4b90-b151-b3590f945e06"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2742),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("fad508da-35c7-4add-8a8c-8f4546c69234"),
                            Name = "5D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("5248b3ac-a295-4dd4-917b-48755bd1bcd0"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2756),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("ed8ed240-de82-4de1-8402-8f395e9809ca"),
                            Name = "6D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("d71bc441-8f44-48c4-a65f-2525a29903c9"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2769),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a1f6884b-df7a-44e0-90a1-9b53e118286e"),
                            Name = "7D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("2f363256-6afa-4f45-a430-58885aa5e643"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2783),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("dbe2cf7d-e5a6-417f-84f7-ac52b1a7e1f2"),
                            Name = "8D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("38726940-f647-434a-9b74-5757364b9d4c"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2796),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("e1757882-fdaa-417b-911b-28c36be5fea0"),
                            Name = "9D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("7c6aba58-4d3a-44c2-9990-ffaa893c6a37"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2810),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("98a0171e-1371-47de-988b-1dc003f42af5"),
                            Name = "10D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("a0004cb7-bea4-464e-bb33-85837416123e")
                        },
                        new
                        {
                            Id = new Guid("3ef68f0b-1971-4c70-bdca-42d5e14a5e23"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2828),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("dbe2cf7d-e5a6-417f-84f7-ac52b1a7e1f2"),
                            Name = "Classic Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("33df749d-a17f-4d04-a9c7-3c5fd2ba1a0f")
                        },
                        new
                        {
                            Id = new Guid("443619e7-5178-43c3-9928-5829f05d35df"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2840),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("dbe2cf7d-e5a6-417f-84f7-ac52b1a7e1f2"),
                            Name = "Volume Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("33df749d-a17f-4d04-a9c7-3c5fd2ba1a0f")
                        },
                        new
                        {
                            Id = new Guid("e2c27213-eb48-446c-9495-ae11b82942b7"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2852),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("ed8ed240-de82-4de1-8402-8f395e9809ca"),
                            Name = "Classic Eye Brow lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("33df749d-a17f-4d04-a9c7-3c5fd2ba1a0f")
                        },
                        new
                        {
                            Id = new Guid("e0bc64d0-c2dd-4c8d-b886-6f137cb733ef"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2867),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a1f6884b-df7a-44e0-90a1-9b53e118286e"),
                            Name = "Volume Eye Brow Lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("33df749d-a17f-4d04-a9c7-3c5fd2ba1a0f")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0004cb7-bea4-464e-bb33-85837416123e"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("33df749d-a17f-4d04-a9c7-3c5fd2ba1a0f"),
                            Name = "Eye Brow Shaping"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceShowCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4632d588-8f46-48aa-83ee-aba776fa19b0"),
                            Created = new DateTime(2024, 12, 6, 23, 12, 27, 15, DateTimeKind.Utc).AddTicks(2888),
                            ServiceId = new Guid("29d10e4f-6e9d-44b6-8e41-4d90215e4a4e")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasHadEyeProblems4Weeks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSensitiveSkin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaiverAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WearsContanctLenses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentProduct", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.Product", "Product")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentService", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Products")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductShowcase", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Services")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceShowCase", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentProducts");

                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ImageUpload", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.Navigation("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}

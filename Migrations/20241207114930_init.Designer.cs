// <auto-generated />
using System;
using JricaStudioWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JricaStudioWebApi.Migrations
{
    [DbContext(typeof(JaysLashesDbContext))]
    [Migration("20241207114930_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("JricaStudioWebApi.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdminKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResetKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResetKeySent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdac5f7e-19b3-48ef-9030-343dbd505a71"),
                            AdminKey = new Guid("c3735184-fec7-4da8-bbc9-beed86f418a8"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5784),
                            FirstName = "Jayrica",
                            LastName = "Cunanan",
                            Password = "$2a$11$qD.0XYzEinIt1ZM296b5JOWiBlcVT5FQqsCUAyo1wswsucBmtBz8q",
                            Phone = "0422453888",
                            ResetKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            ResetKeySent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "jricastudio@gmail.com"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHadEyelashExtentions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDepositPaid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSampleSetComplete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SampleSetCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.BlockOutDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockOutDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36b55092-4978-494f-85df-15827b1a08ff"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9412),
                            Date = new DateOnly(2024, 12, 9)
                        },
                        new
                        {
                            Id = new Guid("b73847dd-eef3-4791-8b98-2f389e0e5adf"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9439),
                            Date = new DateOnly(2024, 12, 11)
                        },
                        new
                        {
                            Id = new Guid("2ec6d4de-0523-4114-a290-7103f9e53a7e"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9478),
                            Date = new DateOnly(2024, 12, 13)
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.BusinessHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AfterHoursGraceRange")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LocalTimeOffset")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessHours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dc4bdd2-2cca-446f-81b8-9f984855ef37"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8700),
                            Day = 0,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8fe10108-2b23-40e4-9cea-0486d9a458c3"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8762),
                            Day = 1,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1c547614-c584-442f-87fa-8416329cd965"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8776),
                            Day = 2,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("497b53de-21c3-4906-a523-136d93222341"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8796),
                            Day = 3,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e91abe51-a8ed-49d8-853b-e2879ad0033a"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8807),
                            Day = 4,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("653a1de4-c74d-40b6-a831-0b219c4fc936"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8821),
                            Day = 5,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("0e75538b-41b5-41b6-a618-013aa4784e2b"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8832),
                            Day = 6,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ImageUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImageUploads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("964f2080-01fd-48c2-afea-0755bba97315"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5095),
                            FileName = "TestImage0",
                            StoredFileName = "2aubqrya.se1"
                        },
                        new
                        {
                            Id = new Guid("9e50c32a-b21b-47ca-b144-7bbc0ee53042"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5159),
                            FileName = "TestImage1",
                            StoredFileName = "fhu1f0as.q1j"
                        },
                        new
                        {
                            Id = new Guid("4f4decdb-3cd4-4f55-9852-bd063ce53220"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5172),
                            FileName = "TestImage2",
                            StoredFileName = "jqwex1ch.5fv"
                        },
                        new
                        {
                            Id = new Guid("9e769b48-9ee2-490e-965d-1b6b67f52212"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5182),
                            FileName = "TestImage3",
                            StoredFileName = "kddfooda.qlo"
                        },
                        new
                        {
                            Id = new Guid("a4bfef7d-b929-4fc1-94a9-2428709bfa91"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5197),
                            FileName = "TestImage4",
                            StoredFileName = "mow5g222.zwf"
                        },
                        new
                        {
                            Id = new Guid("898e4ad1-d9f9-42ca-a5bf-3a5984ddeaae"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5208),
                            FileName = "TestImage5",
                            StoredFileName = "mthjb4ul.hqn"
                        },
                        new
                        {
                            Id = new Guid("ec55ab81-5191-4793-bbae-1206ab0c5662"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5219),
                            FileName = "TestImage6",
                            StoredFileName = "qr4gtj1t.s2g"
                        },
                        new
                        {
                            Id = new Guid("182e064b-b108-4bfa-88d7-e1d7fd2f6b72"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5230),
                            FileName = "TestImage7",
                            StoredFileName = "rnguv4sj.yq1"
                        },
                        new
                        {
                            Id = new Guid("2553145e-4214-4b9c-bd0a-6bcdf1320a9a"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5243),
                            FileName = "TestImage8",
                            StoredFileName = "x01stjie.g42"
                        },
                        new
                        {
                            Id = new Guid("b402b14c-fbde-4e25-80ed-a4a4278ad4f7"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5257),
                            FileName = "TestImage9",
                            StoredFileName = "zzppfrlm.wcj"
                        },
                        new
                        {
                            Id = new Guid("2c3183b0-e882-43c2-b716-6071f001978a"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5684),
                            FileName = "TestImage0",
                            StoredFileName = "i4cksssk.ch2"
                        },
                        new
                        {
                            Id = new Guid("6a4d1239-f8ea-4941-901a-48c3ed10e08d"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5701),
                            FileName = "TestImage1",
                            StoredFileName = "icbjzpkg.vdq"
                        },
                        new
                        {
                            Id = new Guid("2eb9373b-2333-46af-8f1c-ed8795ed4e59"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5722),
                            FileName = "TestImage2",
                            StoredFileName = "ksbexjv0.h5g"
                        },
                        new
                        {
                            Id = new Guid("3ab6c196-4041-4433-9abb-d1208e89ee4f"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5742),
                            FileName = "TestImage3",
                            StoredFileName = "xalczynf.rkv"
                        },
                        new
                        {
                            Id = new Guid("019b9ba0-22da-4492-b92b-3d9618c8656c"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 472, DateTimeKind.Utc).AddTicks(5761),
                            FileName = "TestImage4",
                            StoredFileName = "xxob4cje.kui"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyArticle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87aef8f4-4109-41a0-94ae-12ff6bf2cc2f"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8937),
                            Description = "Description",
                            ImageUploadId = new Guid("6a4d1239-f8ea-4941-901a-48c3ed10e08d"),
                            Name = "Aveeno Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("fad60c8d-a87a-43d0-b089-b7764ee0ad57"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("acb768cc-4c79-4fa2-b8a5-8929fc6af994"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(8998),
                            Description = "Description",
                            ImageUploadId = new Guid("3ab6c196-4041-4433-9abb-d1208e89ee4f"),
                            Name = "Vaseline Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("fad60c8d-a87a-43d0-b089-b7764ee0ad57"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("6083a12e-3470-4839-9730-e41ba5f6dd27"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9016),
                            Description = "Description",
                            ImageUploadId = new Guid("3ab6c196-4041-4433-9abb-d1208e89ee4f"),
                            Name = "Nivea Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("fad60c8d-a87a-43d0-b089-b7764ee0ad57"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("81a03b73-1a26-4a64-8555-e18dcfe9b29e"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9029),
                            Description = "Description",
                            ImageUploadId = new Guid("6a4d1239-f8ea-4941-901a-48c3ed10e08d"),
                            Name = "Curel Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("fad60c8d-a87a-43d0-b089-b7764ee0ad57"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("63f10458-5b42-483e-ac54-9da88dfd7cd3"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9044),
                            Description = "Description",
                            ImageUploadId = new Guid("3ab6c196-4041-4433-9abb-d1208e89ee4f"),
                            Name = "Classic Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("ec71ac05-34cb-432d-ac54-6434761d46b0"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("c31d27a4-44a0-47f6-b5ac-d9a6a2b091d7"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9058),
                            Description = "Description",
                            ImageUploadId = new Guid("2c3183b0-e882-43c2-b716-6071f001978a"),
                            Name = "Volume Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("ec71ac05-34cb-432d-ac54-6434761d46b0"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("b8fefedb-9050-4061-8350-377626f306ea"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9151),
                            Description = "Description",
                            ImageUploadId = new Guid("3ab6c196-4041-4433-9abb-d1208e89ee4f"),
                            Name = "Wet Look Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("ec71ac05-34cb-432d-ac54-6434761d46b0"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("bd8d7915-626e-4d93-b0cd-dea47c2175ae"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9167),
                            Description = "Description",
                            ImageUploadId = new Guid("3ab6c196-4041-4433-9abb-d1208e89ee4f"),
                            Name = "3D Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("ec71ac05-34cb-432d-ac54-6434761d46b0"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec71ac05-34cb-432d-ac54-6434761d46b0"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("fad60c8d-a87a-43d0-b089-b7764ee0ad57"),
                            Name = "Lotion"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductShowcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("971f918a-9b89-4bb5-9df8-44f543e9120e"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9496),
                            ProductId = new Guid("63f10458-5b42-483e-ac54-9da88dfd7cd3")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e07b8f5-519b-4300-a17b-2773c5573d42"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9190),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("2553145e-4214-4b9c-bd0a-6bcdf1320a9a"),
                            Name = "2D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("c51e52fe-f4f2-448c-9b69-0f791251970a"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9231),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a4bfef7d-b929-4fc1-94a9-2428709bfa91"),
                            Name = "3D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("6c794798-bef7-4cd0-8a44-5f49b0663f19"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9245),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("898e4ad1-d9f9-42ca-a5bf-3a5984ddeaae"),
                            Name = "4D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("e770d9e9-3469-4c77-99d5-18395f4f000b"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9257),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("4f4decdb-3cd4-4f55-9852-bd063ce53220"),
                            Name = "5D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("89dd9336-143f-408e-99c5-734108fd8281"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9268),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a4bfef7d-b929-4fc1-94a9-2428709bfa91"),
                            Name = "6D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("a78f462a-3b5a-4ccd-a52d-dbe4cf0ed428"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9283),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("964f2080-01fd-48c2-afea-0755bba97315"),
                            Name = "7D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("f02fcbe7-d485-4993-8dae-d2f0e770d074"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9296),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("9e50c32a-b21b-47ca-b144-7bbc0ee53042"),
                            Name = "8D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("817c4f9f-1cf3-45b0-9431-9dad0733f065"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9308),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("964f2080-01fd-48c2-afea-0755bba97315"),
                            Name = "9D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("9e51fdf3-d934-4899-a21c-64ec9b117982"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9321),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("898e4ad1-d9f9-42ca-a5bf-3a5984ddeaae"),
                            Name = "10D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a")
                        },
                        new
                        {
                            Id = new Guid("767ea8b9-7eea-4fe6-b18e-dae5d4e0074d"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9334),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("9e769b48-9ee2-490e-965d-1b6b67f52212"),
                            Name = "Classic Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("9948eb81-d3db-412e-aaa3-f2b7746f26ab")
                        },
                        new
                        {
                            Id = new Guid("a2262847-46cb-40c4-a4c4-c57dd0a5189f"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9346),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("2553145e-4214-4b9c-bd0a-6bcdf1320a9a"),
                            Name = "Volume Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("9948eb81-d3db-412e-aaa3-f2b7746f26ab")
                        },
                        new
                        {
                            Id = new Guid("6ff29863-df1c-4348-afdf-b98ebd0d47df"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9357),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("ec55ab81-5191-4793-bbae-1206ab0c5662"),
                            Name = "Classic Eye Brow lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("9948eb81-d3db-412e-aaa3-f2b7746f26ab")
                        },
                        new
                        {
                            Id = new Guid("4f963a67-b404-4183-9ccc-4b1102b7ed5c"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9369),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("9e769b48-9ee2-490e-965d-1b6b67f52212"),
                            Name = "Volume Eye Brow Lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("9948eb81-d3db-412e-aaa3-f2b7746f26ab")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa986f20-34de-46ac-83c6-954b49c5c89a"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("9948eb81-d3db-412e-aaa3-f2b7746f26ab"),
                            Name = "Eye Brow Shaping"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceShowCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7aea277-5e6d-4b2b-ba91-484208adbedd"),
                            Created = new DateTime(2024, 12, 7, 11, 49, 30, 561, DateTimeKind.Utc).AddTicks(9388),
                            ServiceId = new Guid("7e07b8f5-519b-4300-a17b-2773c5573d42")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasHadEyeProblems4Weeks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSensitiveSkin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaiverAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WearsContanctLenses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentProduct", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.Product", "Product")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentService", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Products")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductShowcase", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Services")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceShowCase", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentProducts");

                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ImageUpload", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.Navigation("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}

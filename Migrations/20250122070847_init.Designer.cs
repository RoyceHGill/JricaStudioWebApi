// <auto-generated />
using System;
using JricaStudioWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JricaStudioWebApi.Migrations
{
    [DbContext(typeof(JaysLashesDbContext))]
    [Migration("20250122070847_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdminKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResetKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResetKeySent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f75c8dc8-2b85-4308-8145-ef69485c6399"),
                            AdminKey = new Guid("505d1f96-cb45-44ba-95a1-d4566e78337e"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 645, DateTimeKind.Utc).AddTicks(6629),
                            FirstName = "Jayrica",
                            LastName = "Cunanan",
                            Password = "$2a$11$okWy7urSc7G66WFf5p454OcjVcpErRSL6M86ytRRiV3vpAX/3tEX2",
                            Phone = "0422453888",
                            ResetKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            ResetKeySent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "jricastudio@gmail.com"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHadEyelashExtentions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDepositPaid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSampleSetComplete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SampleSetCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.BlockOutDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockOutDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0434f408-0782-45c2-82e9-741e2df3c33d"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5419),
                            Date = new DateOnly(2025, 1, 24)
                        },
                        new
                        {
                            Id = new Guid("51223b65-79a6-47f8-839a-3ebba3bdf464"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5446),
                            Date = new DateOnly(2025, 1, 26)
                        },
                        new
                        {
                            Id = new Guid("21c2d868-3bbe-487d-bacf-12dfe5311410"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5457),
                            Date = new DateOnly(2025, 1, 28)
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.BusinessHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AfterHoursGraceRange")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LocalTimeOffset")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessHours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a734c6cf-ed13-4a4b-9e5a-c93579106899"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4816),
                            Day = 0,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("29e76d9a-1232-4845-852e-0e0d3aaa1c9e"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4882),
                            Day = 1,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("6c92a834-502e-4452-8548-8dbd40e6c7e8"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4894),
                            Day = 2,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2779aa5e-6940-4c73-a9ce-5e16fd8e965f"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4904),
                            Day = 3,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ac242e66-9158-4d47-96be-55bc91c8747e"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4915),
                            Day = 4,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("98136c2a-de09-42a2-8c02-120da7c04575"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4927),
                            Day = 5,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e3de7592-dc63-466b-896a-d3afd054ca6d"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4937),
                            Day = 6,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ImageUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImageUploads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0e3d5ef-306f-424b-9cfb-69aec1979e44"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(3859),
                            FileName = "TestImage0",
                            StoredFileName = "2hhbpn5f.0l4"
                        },
                        new
                        {
                            Id = new Guid("c0fcc37b-832b-4634-9ae4-25576649a35f"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(3903),
                            FileName = "TestImage1",
                            StoredFileName = "4ecfsmzj.5vq"
                        },
                        new
                        {
                            Id = new Guid("708b7255-d034-4143-8186-b8f19f8b1e65"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(3914),
                            FileName = "TestImage2",
                            StoredFileName = "5viixxdx.za1"
                        },
                        new
                        {
                            Id = new Guid("a6ef7706-75f5-485b-a0f9-3c074f8e0648"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(3925),
                            FileName = "TestImage3",
                            StoredFileName = "5viliiwb.s44"
                        },
                        new
                        {
                            Id = new Guid("9360a3b1-9f00-464e-b43f-ce90ef761ab8"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(3946),
                            FileName = "TestImage4",
                            StoredFileName = "cabzutlu.2ql"
                        },
                        new
                        {
                            Id = new Guid("00520433-1dc8-44f8-8002-6c827ae54b77"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(3960),
                            FileName = "TestImage5",
                            StoredFileName = "iboasfkp.w3b"
                        },
                        new
                        {
                            Id = new Guid("be012cd3-27f8-4e5b-83fd-2298b6ec94de"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(3972),
                            FileName = "TestImage6",
                            StoredFileName = "ipdcda1n.dee"
                        },
                        new
                        {
                            Id = new Guid("22ac4d89-e1d0-487a-90dc-e5932d8f1d3e"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(3985),
                            FileName = "TestImage7",
                            StoredFileName = "kxrby3er.clx"
                        },
                        new
                        {
                            Id = new Guid("8e754df1-53ba-4727-b857-bfd2ec1cf55c"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4025),
                            FileName = "TestImage8",
                            StoredFileName = "s4qx54cs.1ds"
                        },
                        new
                        {
                            Id = new Guid("5ccfc659-4212-47d7-9bd5-ccd5c51be600"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4038),
                            FileName = "TestImage9",
                            StoredFileName = "uu15yrqp.mb1"
                        },
                        new
                        {
                            Id = new Guid("45a97314-3065-4306-bdaa-7f0cec91c9f8"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4448),
                            FileName = "TestImage0",
                            StoredFileName = "1ljopecf.nq4"
                        },
                        new
                        {
                            Id = new Guid("43e3ebf5-84a8-4fed-a90e-f78b45d4b2eb"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4465),
                            FileName = "TestImage1",
                            StoredFileName = "4j0qknjz.roc"
                        },
                        new
                        {
                            Id = new Guid("20434728-e9d4-47d4-88bb-711e6b0753db"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4477),
                            FileName = "TestImage2",
                            StoredFileName = "ml2hrcfr.fff"
                        },
                        new
                        {
                            Id = new Guid("14a64a27-f659-42d1-b82e-2140080bf1a5"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(4488),
                            FileName = "TestImage3",
                            StoredFileName = "t1uxyuv1.rct"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyArticle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e2f34f9-21b1-4f98-a533-78f4c0ff887e"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5031),
                            Description = "Description",
                            ImageUploadId = new Guid("20434728-e9d4-47d4-88bb-711e6b0753db"),
                            Name = "Aveeno Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("412855ec-df76-4203-aa1f-48a4f05d3d7b"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("deaacc53-9223-47eb-a0bd-c8296ea2fde8"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5086),
                            Description = "Description",
                            ImageUploadId = new Guid("45a97314-3065-4306-bdaa-7f0cec91c9f8"),
                            Name = "Vaseline Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("412855ec-df76-4203-aa1f-48a4f05d3d7b"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("8813dc88-67ad-489f-9921-41061cefd261"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5099),
                            Description = "Description",
                            ImageUploadId = new Guid("45a97314-3065-4306-bdaa-7f0cec91c9f8"),
                            Name = "Nivea Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("412855ec-df76-4203-aa1f-48a4f05d3d7b"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("5f9cbe78-d359-415f-b51d-597782e02135"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5112),
                            Description = "Description",
                            ImageUploadId = new Guid("45a97314-3065-4306-bdaa-7f0cec91c9f8"),
                            Name = "Curel Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("412855ec-df76-4203-aa1f-48a4f05d3d7b"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("572eb17f-7fbe-431d-a8bc-5ddda4d1e44c"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5124),
                            Description = "Description",
                            ImageUploadId = new Guid("20434728-e9d4-47d4-88bb-711e6b0753db"),
                            Name = "Classic Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("1aa9bb0b-da81-45e8-9a69-9d6960f4ac4a"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("4ae83ebe-8b03-4864-8ed7-3883c6058dcf"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5135),
                            Description = "Description",
                            ImageUploadId = new Guid("43e3ebf5-84a8-4fed-a90e-f78b45d4b2eb"),
                            Name = "Volume Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("1aa9bb0b-da81-45e8-9a69-9d6960f4ac4a"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("bc0e2c58-4b4c-46cb-9553-1ad82788a93c"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5148),
                            Description = "Description",
                            ImageUploadId = new Guid("45a97314-3065-4306-bdaa-7f0cec91c9f8"),
                            Name = "Wet Look Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("1aa9bb0b-da81-45e8-9a69-9d6960f4ac4a"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("542c4c9e-e467-4991-b987-ba3cc7dd544a"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5160),
                            Description = "Description",
                            ImageUploadId = new Guid("20434728-e9d4-47d4-88bb-711e6b0753db"),
                            Name = "3D Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("1aa9bb0b-da81-45e8-9a69-9d6960f4ac4a"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1aa9bb0b-da81-45e8-9a69-9d6960f4ac4a"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("412855ec-df76-4203-aa1f-48a4f05d3d7b"),
                            Name = "Lotion"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductShowcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6da40bf-c60b-422a-b54c-0118b1023a1a"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5473),
                            ProductId = new Guid("572eb17f-7fbe-431d-a8bc-5ddda4d1e44c")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3501ec61-3b7a-4906-a1f0-39c850789907"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5181),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("be012cd3-27f8-4e5b-83fd-2298b6ec94de"),
                            Name = "2D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("89495072-9779-46a0-8521-b2c358caf421"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5211),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("00520433-1dc8-44f8-8002-6c827ae54b77"),
                            Name = "3D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("db8c5d10-c4f8-47ea-adee-2ed497d4df46"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5252),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("708b7255-d034-4143-8186-b8f19f8b1e65"),
                            Name = "4D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("caaf9a94-2726-4c75-ad5e-5f0d2903f56e"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5268),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("8e754df1-53ba-4727-b857-bfd2ec1cf55c"),
                            Name = "5D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("3612ff06-05ce-4567-afe9-ed5433a5cc1b"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5282),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("9360a3b1-9f00-464e-b43f-ce90ef761ab8"),
                            Name = "6D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("6768752b-2eb1-4af5-a073-52821709af90"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5297),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("be012cd3-27f8-4e5b-83fd-2298b6ec94de"),
                            Name = "7D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("03552cb9-89ef-42f4-9c5d-88b5eaffe5c4"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5309),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("c0e3d5ef-306f-424b-9cfb-69aec1979e44"),
                            Name = "8D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("7a1e0aa5-cead-4a8e-8caa-84509ad2b2be"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5321),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("be012cd3-27f8-4e5b-83fd-2298b6ec94de"),
                            Name = "9D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("e2ed61c3-2088-4e2f-8dce-65115660a1af"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5333),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("9360a3b1-9f00-464e-b43f-ce90ef761ab8"),
                            Name = "10D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1")
                        },
                        new
                        {
                            Id = new Guid("ec61bcb4-2e9d-47d5-9fd7-db68726dc31a"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5346),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("9360a3b1-9f00-464e-b43f-ce90ef761ab8"),
                            Name = "Classic Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("df4c4988-9a1d-43ab-ba39-2d88ec923733")
                        },
                        new
                        {
                            Id = new Guid("4cc13340-1b96-4836-97de-c3f348b58690"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5357),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a6ef7706-75f5-485b-a0f9-3c074f8e0648"),
                            Name = "Volume Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("df4c4988-9a1d-43ab-ba39-2d88ec923733")
                        },
                        new
                        {
                            Id = new Guid("ce974964-57d9-4b5e-bfce-c8a0d06e5af9"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5369),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("00520433-1dc8-44f8-8002-6c827ae54b77"),
                            Name = "Classic Eye Brow lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("df4c4988-9a1d-43ab-ba39-2d88ec923733")
                        },
                        new
                        {
                            Id = new Guid("f2506bb0-7cfe-4a69-9979-2b2917b2d591"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5382),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("708b7255-d034-4143-8186-b8f19f8b1e65"),
                            Name = "Volume Eye Brow Lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("df4c4988-9a1d-43ab-ba39-2d88ec923733")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9073c793-c0d4-4e99-a6c5-1919c3ce36f1"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("df4c4988-9a1d-43ab-ba39-2d88ec923733"),
                            Name = "Eye Brow Shaping"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceShowCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4352713d-5679-4ebc-9a0c-66a52fce8ce0"),
                            Created = new DateTime(2025, 1, 22, 7, 8, 46, 735, DateTimeKind.Utc).AddTicks(5401),
                            ServiceId = new Guid("3501ec61-3b7a-4906-a1f0-39c850789907")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasHadEyeProblems4Weeks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSensitiveSkin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaiverAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WearsContanctLenses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentProduct", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.Product", "Product")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentService", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Products")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductShowcase", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Services")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceShowCase", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentProducts");

                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ImageUpload", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.Navigation("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}

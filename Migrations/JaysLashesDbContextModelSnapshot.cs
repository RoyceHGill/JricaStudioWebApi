// <auto-generated />
using System;
using JricaStudioWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JricaStudioWebApi.Migrations
{
    [DbContext(typeof(JaysLashesDbContext))]
    partial class JaysLashesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("JricaStudioWebApi.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdminKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResetKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResetKeySent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aece502-a01d-469b-a283-059eb059df3c"),
                            AdminKey = new Guid("0b0d2b05-c02d-4ec1-8f93-2efacc86efaa"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2655),
                            FirstName = "Jayrica",
                            LastName = "Cunanan",
                            Password = "$2a$11$XCFJ1PYYjXY9BzZYLj4lsOAJ1fUxuo/GjgH.jEKvNdLqqcGyNeqKW",
                            Phone = "0422453888",
                            ResetKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            ResetKeySent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "jricastudio@gmail.com"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHadEyelashExtentions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDepositPaid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSampleSetComplete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SampleSetCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.BlockOutDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockOutDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1eed7b69-3bea-47e4-8a8e-31f778d515b3"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(6001),
                            Date = new DateOnly(2024, 12, 10)
                        },
                        new
                        {
                            Id = new Guid("b6b1db24-e521-49c8-a313-ab7ceb0db2bc"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(6030),
                            Date = new DateOnly(2024, 12, 12)
                        },
                        new
                        {
                            Id = new Guid("49247771-68e2-4ee2-9c80-04ad95852420"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(6042),
                            Date = new DateOnly(2024, 12, 14)
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.BusinessHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AfterHoursGraceRange")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LocalTimeOffset")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessHours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("265fddf8-dfd1-48fc-aa0f-5cc191a6b13e"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5205),
                            Day = 0,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("dcaae268-9fd6-428a-b71d-a12ea25487e8"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5277),
                            Day = 1,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("bb7aef54-e7e1-43dd-9a24-85fea17787db"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5290),
                            Day = 2,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("964840b1-10de-48f5-a494-2a4e745ce998"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5302),
                            Day = 3,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9e17ea5e-9f4f-4703-854b-9063dfac9f5f"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5314),
                            Day = 4,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("32fcaf6f-5ab8-4cd7-91b3-09e6afda9d63"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5330),
                            Day = 5,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("7f8fc455-833c-45ab-9b73-0ecfc17eb67c"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5341),
                            Day = 6,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ImageUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImageUploads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bd5bc8f-94af-4a78-aab6-7d739aa15a20"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2009),
                            FileName = "TestImage0",
                            StoredFileName = "3hclps3p.a1h"
                        },
                        new
                        {
                            Id = new Guid("a15adcc7-4339-4463-b587-8481238f98d4"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2059),
                            FileName = "TestImage1",
                            StoredFileName = "cp3kaueq.n5c"
                        },
                        new
                        {
                            Id = new Guid("09d951a7-dea5-4d6d-bf53-2ca8348590db"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2070),
                            FileName = "TestImage2",
                            StoredFileName = "cxoakqsc.3bi"
                        },
                        new
                        {
                            Id = new Guid("8e33d993-e2b1-4dce-8f06-e22e43a58d3d"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2083),
                            FileName = "TestImage3",
                            StoredFileName = "dt02ly20.dnp"
                        },
                        new
                        {
                            Id = new Guid("a3facd2e-3868-4ac7-b312-66429c6ee456"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2095),
                            FileName = "TestImage4",
                            StoredFileName = "iqwsymby.kfi"
                        },
                        new
                        {
                            Id = new Guid("02a74cda-a35b-4a28-af43-ec1d9b97192a"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2108),
                            FileName = "TestImage5",
                            StoredFileName = "ngsqjaxp.n4e"
                        },
                        new
                        {
                            Id = new Guid("1e317c07-f726-47a5-bb79-2cd887a06399"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2118),
                            FileName = "TestImage6",
                            StoredFileName = "s2yyclvc.hig"
                        },
                        new
                        {
                            Id = new Guid("c0acfc6a-3c0e-46eb-bf4b-5300e532e9a2"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2129),
                            FileName = "TestImage7",
                            StoredFileName = "sae4fqsn.w4s"
                        },
                        new
                        {
                            Id = new Guid("b552dd17-095f-4ed6-b453-2262f0786cc1"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2140),
                            FileName = "TestImage8",
                            StoredFileName = "yxrfdhmb.zpb"
                        },
                        new
                        {
                            Id = new Guid("d280e2f5-4ecc-4ab9-9406-fbf87faba588"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2156),
                            FileName = "TestImage9",
                            StoredFileName = "zl3oilrm.f5n"
                        },
                        new
                        {
                            Id = new Guid("3b4b0b8a-7107-4351-91cc-8db22cb531ae"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2596),
                            FileName = "TestImage0",
                            StoredFileName = "4nuwndu0.buf"
                        },
                        new
                        {
                            Id = new Guid("8499a75d-ba93-487c-a3d7-3ed41ccc0602"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2611),
                            FileName = "TestImage1",
                            StoredFileName = "c0bwlcik.ssu"
                        },
                        new
                        {
                            Id = new Guid("a9819b44-12dd-4ca2-bd0f-6ae45c91d7ca"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2622),
                            FileName = "TestImage2",
                            StoredFileName = "kiy5oofa.lka"
                        },
                        new
                        {
                            Id = new Guid("1caa188e-295f-48d5-ad0a-4208a7be281b"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2631),
                            FileName = "TestImage3",
                            StoredFileName = "mdzy12e5.uml"
                        },
                        new
                        {
                            Id = new Guid("7220a159-861b-46c7-bc3f-3dfe66d0ebdd"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 242, DateTimeKind.Utc).AddTicks(2641),
                            FileName = "TestImage4",
                            StoredFileName = "rru2y10u.2at"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyArticle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60a7ca92-6d78-48ed-beac-0350d44aa555"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5513),
                            Description = "Description",
                            ImageUploadId = new Guid("a9819b44-12dd-4ca2-bd0f-6ae45c91d7ca"),
                            Name = "Aveeno Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("99330a1f-b086-4b7e-a217-7e3d0079c088"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("76680d9f-8b31-4304-941e-33e59616d4e1"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5591),
                            Description = "Description",
                            ImageUploadId = new Guid("1caa188e-295f-48d5-ad0a-4208a7be281b"),
                            Name = "Vaseline Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("99330a1f-b086-4b7e-a217-7e3d0079c088"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("bb99454a-c5a3-4fe5-81e2-18843a66444e"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5613),
                            Description = "Description",
                            ImageUploadId = new Guid("3b4b0b8a-7107-4351-91cc-8db22cb531ae"),
                            Name = "Nivea Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("99330a1f-b086-4b7e-a217-7e3d0079c088"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("ef3c2a25-7c82-4901-b97d-ec936e844429"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5637),
                            Description = "Description",
                            ImageUploadId = new Guid("8499a75d-ba93-487c-a3d7-3ed41ccc0602"),
                            Name = "Curel Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("99330a1f-b086-4b7e-a217-7e3d0079c088"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("9e437704-c642-49fe-b2ec-2e6d42b1f439"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5658),
                            Description = "Description",
                            ImageUploadId = new Guid("3b4b0b8a-7107-4351-91cc-8db22cb531ae"),
                            Name = "Classic Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("87ffd916-9ba0-418e-9a10-0e61954d133c"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("7e9ec2bb-a7a5-4a8a-8e38-ad87827200ec"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5681),
                            Description = "Description",
                            ImageUploadId = new Guid("3b4b0b8a-7107-4351-91cc-8db22cb531ae"),
                            Name = "Volume Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("87ffd916-9ba0-418e-9a10-0e61954d133c"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("4ffa6b89-e1c6-4f2b-af68-3c34b7e600d6"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5708),
                            Description = "Description",
                            ImageUploadId = new Guid("8499a75d-ba93-487c-a3d7-3ed41ccc0602"),
                            Name = "Wet Look Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("87ffd916-9ba0-418e-9a10-0e61954d133c"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("8e891258-7896-43e3-9df8-c89472baa728"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5728),
                            Description = "Description",
                            ImageUploadId = new Guid("8499a75d-ba93-487c-a3d7-3ed41ccc0602"),
                            Name = "3D Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("87ffd916-9ba0-418e-9a10-0e61954d133c"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87ffd916-9ba0-418e-9a10-0e61954d133c"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("99330a1f-b086-4b7e-a217-7e3d0079c088"),
                            Name = "Lotion"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductShowcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68cc7699-c1fb-4556-918d-111a9cbd5979"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(6060),
                            ProductId = new Guid("9e437704-c642-49fe-b2ec-2e6d42b1f439")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83ee7bff-d173-42f0-ab3a-148fbee446cc"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5754),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("09d951a7-dea5-4d6d-bf53-2ca8348590db"),
                            Name = "2D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("a00d2578-a77b-4386-83a2-ae5de48b7e7f"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5795),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("02a74cda-a35b-4a28-af43-ec1d9b97192a"),
                            Name = "3D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("5254e7cd-f1d2-4d9a-a819-100ead2e674f"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5809),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("c0acfc6a-3c0e-46eb-bf4b-5300e532e9a2"),
                            Name = "4D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("76d4b7d0-b8d6-4db0-b13e-82771aac1b55"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5821),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("8e33d993-e2b1-4dce-8f06-e22e43a58d3d"),
                            Name = "5D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("ffad169e-0e51-4d8c-a8e7-314e6172780a"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5834),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a15adcc7-4339-4463-b587-8481238f98d4"),
                            Name = "6D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("262a7d9d-6055-4d3d-b137-3d20e70bcddc"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5847),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("b552dd17-095f-4ed6-b453-2262f0786cc1"),
                            Name = "7D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("f3f48de7-ccbf-413a-8e38-7a4b0b780914"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5859),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("8e33d993-e2b1-4dce-8f06-e22e43a58d3d"),
                            Name = "8D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("19f71d23-f4a8-443e-8809-2a6662a26f31"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5892),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a15adcc7-4339-4463-b587-8481238f98d4"),
                            Name = "9D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("36879fa4-fd5c-4fba-91ff-80b160fff825"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5904),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("b552dd17-095f-4ed6-b453-2262f0786cc1"),
                            Name = "10D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2")
                        },
                        new
                        {
                            Id = new Guid("a3b692b1-e83a-409a-a176-2d09bdb856e8"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5918),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("c0acfc6a-3c0e-46eb-bf4b-5300e532e9a2"),
                            Name = "Classic Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("e29b9009-6e2a-4159-aa40-8c90968431ca")
                        },
                        new
                        {
                            Id = new Guid("db091346-f628-4010-a0e4-17a55dafe23e"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5930),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("c0acfc6a-3c0e-46eb-bf4b-5300e532e9a2"),
                            Name = "Volume Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("e29b9009-6e2a-4159-aa40-8c90968431ca")
                        },
                        new
                        {
                            Id = new Guid("7a19c482-273c-4654-80df-f57bcdcdfe27"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5942),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a15adcc7-4339-4463-b587-8481238f98d4"),
                            Name = "Classic Eye Brow lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("e29b9009-6e2a-4159-aa40-8c90968431ca")
                        },
                        new
                        {
                            Id = new Guid("a7530d63-cbb4-4440-98f7-4a0dbc6261a1"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5956),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("a3facd2e-3868-4ac7-b312-66429c6ee456"),
                            Name = "Volume Eye Brow Lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("e29b9009-6e2a-4159-aa40-8c90968431ca")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff1788c9-a3a0-4c67-9c75-86cc4c1c58c2"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("e29b9009-6e2a-4159-aa40-8c90968431ca"),
                            Name = "Eye Brow Shaping"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceShowCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e4bb6d8-1b3c-4aa1-a980-0374229fc68e"),
                            Created = new DateTime(2024, 12, 8, 0, 14, 49, 332, DateTimeKind.Utc).AddTicks(5976),
                            ServiceId = new Guid("83ee7bff-d173-42f0-ab3a-148fbee446cc")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasHadEyeProblems4Weeks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSensitiveSkin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaiverAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WearsContanctLenses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentProduct", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.Product", "Product")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentService", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Products")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductShowcase", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Services")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceShowCase", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentProducts");

                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ImageUpload", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.Navigation("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}

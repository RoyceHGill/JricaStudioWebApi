// <auto-generated />
using System;
using JricaStudioWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JricaStudioWebApi.Migrations
{
    [DbContext(typeof(JaysLashesDbContext))]
    partial class JaysLashesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdminKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResetKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResetKeySent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("289f72b9-dd5e-4c62-8cc3-bd9238be78aa"),
                            AdminKey = new Guid("00b4f2d5-4ca2-41ba-81f3-7e23a76f93bf"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 57, DateTimeKind.Utc).AddTicks(7645),
                            FirstName = "Jayrica",
                            LastName = "Cunanan",
                            Password = "$2a$11$5jZmL66zrBNR68t3.xKZOu92/FtKL344Vkjz3vqqL877aa6Tw8qg6",
                            Phone = "0422453888",
                            ResetKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            ResetKeySent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "jricastudio@gmail.com"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHadEyelashExtentions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDepositPaid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSampleSetComplete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SampleSetCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.BlockOutDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockOutDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca2a1114-2061-4751-9208-3d4594b46da4"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5851),
                            Date = new DateOnly(2025, 1, 26)
                        },
                        new
                        {
                            Id = new Guid("df962ca5-f7ab-4944-932c-5a86a2fafabb"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5880),
                            Date = new DateOnly(2025, 1, 28)
                        },
                        new
                        {
                            Id = new Guid("f1594056-9203-42ad-898d-c76d41290b8c"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5890),
                            Date = new DateOnly(2025, 1, 30)
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.BusinessHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AfterHoursGraceRange")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LocalTimeOffset")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessHours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd251297-40cb-4cdc-9adc-c061985643fa"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5213),
                            Day = 0,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("d5ef645f-6417-46d8-89d7-fcb763761e0c"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5251),
                            Day = 1,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c7ebeb74-1847-4496-b008-bbac45f99007"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5262),
                            Day = 2,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("cfbca67a-55f3-4df6-8841-a6ef37de8649"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5272),
                            Day = 3,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e3721ccd-e3cb-47c2-9c7e-8f6b18917b1f"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5281),
                            Day = 4,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("aebfb927-c479-4c33-b335-57545c2fecb9"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5292),
                            Day = 5,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("344da2fc-51a7-4c90-bdd4-143a1fe73f45"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5302),
                            Day = 6,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ImageUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImageUploads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe0900ac-8d15-46ce-8891-1f1160cdc507"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4237),
                            FileName = "TestImage0",
                            StoredFileName = "2njo3fl0.43m"
                        },
                        new
                        {
                            Id = new Guid("cc3764eb-7199-403f-bc6e-5384cc703eed"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4291),
                            FileName = "TestImage1",
                            StoredFileName = "4fchlbk2.rya"
                        },
                        new
                        {
                            Id = new Guid("5911a2bb-5811-4362-90c1-abcb125c0fde"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4309),
                            FileName = "TestImage2",
                            StoredFileName = "bdoiftgs.rax"
                        },
                        new
                        {
                            Id = new Guid("62ad02b9-c784-4eba-bf9c-d672a19bfb72"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4321),
                            FileName = "TestImage3",
                            StoredFileName = "bqkge5do.iss"
                        },
                        new
                        {
                            Id = new Guid("f2d1e8e9-258e-4dd1-b1f2-9b4b94b655ea"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4334),
                            FileName = "TestImage4",
                            StoredFileName = "e1uaxcux.m1n"
                        },
                        new
                        {
                            Id = new Guid("6bbf7b0b-e224-4b79-888f-7543abf59410"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4350),
                            FileName = "TestImage5",
                            StoredFileName = "k3u5m2si.spe"
                        },
                        new
                        {
                            Id = new Guid("f537b478-4f69-4ecf-8452-08eceab8638f"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4370),
                            FileName = "TestImage6",
                            StoredFileName = "tmbf3kzl.zwn"
                        },
                        new
                        {
                            Id = new Guid("00bdf40c-870a-42a5-a3be-0208d133edca"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4383),
                            FileName = "TestImage7",
                            StoredFileName = "wcf3svy4.jnn"
                        },
                        new
                        {
                            Id = new Guid("15303be6-ff19-444f-808f-9138f3ab7683"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4395),
                            FileName = "TestImage8",
                            StoredFileName = "ynyhyfjf.yym"
                        },
                        new
                        {
                            Id = new Guid("a3b66ef9-0f71-4b72-9003-a109953a65a7"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4407),
                            FileName = "TestImage9",
                            StoredFileName = "yuyzgysh.wjy"
                        },
                        new
                        {
                            Id = new Guid("0fecd0b9-60de-408e-8ca3-cc317e0da539"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4902),
                            FileName = "TestImage0",
                            StoredFileName = "jvkwqnf2.mre"
                        },
                        new
                        {
                            Id = new Guid("569a70a7-87a7-44fe-97e8-c6f59f659c7c"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4919),
                            FileName = "TestImage1",
                            StoredFileName = "ohtn2czj.s4o"
                        },
                        new
                        {
                            Id = new Guid("46b83dab-354c-41f2-a3e8-87177e383bd1"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4929),
                            FileName = "TestImage2",
                            StoredFileName = "oz1c3ma1.kd1"
                        },
                        new
                        {
                            Id = new Guid("a79f8f85-0c38-4315-8f3f-cefaee7787e8"),
                            ContentType = "image",
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(4939),
                            FileName = "TestImage3",
                            StoredFileName = "ttt312ik.ffr"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyArticle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("021b8052-06c1-4017-b953-6525fd87f23c"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5414),
                            Description = "Description",
                            ImageUploadId = new Guid("569a70a7-87a7-44fe-97e8-c6f59f659c7c"),
                            Name = "Aveeno Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("30ad4efc-ed66-4f54-8d56-b12006b3a331"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("fd891922-8d6a-423f-81a4-16b056c39738"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5506),
                            Description = "Description",
                            ImageUploadId = new Guid("569a70a7-87a7-44fe-97e8-c6f59f659c7c"),
                            Name = "Vaseline Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("30ad4efc-ed66-4f54-8d56-b12006b3a331"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("9c585caf-c771-4e53-bec8-b15c1825b86a"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5522),
                            Description = "Description",
                            ImageUploadId = new Guid("569a70a7-87a7-44fe-97e8-c6f59f659c7c"),
                            Name = "Nivea Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("30ad4efc-ed66-4f54-8d56-b12006b3a331"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("5c783771-7ad0-49f8-9c7c-bffd7575daf0"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5535),
                            Description = "Description",
                            ImageUploadId = new Guid("569a70a7-87a7-44fe-97e8-c6f59f659c7c"),
                            Name = "Curel Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("30ad4efc-ed66-4f54-8d56-b12006b3a331"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("d062a4d0-402e-4d32-b5cd-dbe34de701c8"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5549),
                            Description = "Description",
                            ImageUploadId = new Guid("46b83dab-354c-41f2-a3e8-87177e383bd1"),
                            Name = "Classic Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("3628ee5c-474d-43ca-b8dc-8973dfb7ecdf"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("fdbfe3ba-00e5-4ed6-828d-f14c63bd4564"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5561),
                            Description = "Description",
                            ImageUploadId = new Guid("46b83dab-354c-41f2-a3e8-87177e383bd1"),
                            Name = "Volume Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("3628ee5c-474d-43ca-b8dc-8973dfb7ecdf"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("a54c2de5-e609-4d9e-a0a6-b4445e70f0d0"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5574),
                            Description = "Description",
                            ImageUploadId = new Guid("46b83dab-354c-41f2-a3e8-87177e383bd1"),
                            Name = "Wet Look Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("3628ee5c-474d-43ca-b8dc-8973dfb7ecdf"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("13981371-e6c9-4cb3-a322-c6dbf6121261"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5588),
                            Description = "Description",
                            ImageUploadId = new Guid("46b83dab-354c-41f2-a3e8-87177e383bd1"),
                            Name = "3D Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("3628ee5c-474d-43ca-b8dc-8973dfb7ecdf"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3628ee5c-474d-43ca-b8dc-8973dfb7ecdf"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("30ad4efc-ed66-4f54-8d56-b12006b3a331"),
                            Name = "Lotion"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductShowcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be4bc69f-0b8c-487b-ab9c-05c635b519d2"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5912),
                            ProductId = new Guid("d062a4d0-402e-4d32-b5cd-dbe34de701c8")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("311f4f1f-ea70-484f-87e1-d34d832d7180"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5609),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("62ad02b9-c784-4eba-bf9c-d672a19bfb72"),
                            Name = "2D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("01dde994-25f9-4a79-aa90-7fed7da10fdf"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5642),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("62ad02b9-c784-4eba-bf9c-d672a19bfb72"),
                            Name = "3D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("b83a7850-71f7-41b9-a679-3b697c8f25bc"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5656),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("f537b478-4f69-4ecf-8452-08eceab8638f"),
                            Name = "4D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("00d654fa-3075-44dd-a823-8aabb415f8de"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5668),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("15303be6-ff19-444f-808f-9138f3ab7683"),
                            Name = "5D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("920a6164-4683-4f6c-aadf-ee5b584e731a"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5682),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("f537b478-4f69-4ecf-8452-08eceab8638f"),
                            Name = "6D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("90415701-0ee3-49fa-81c3-96c96cad462f"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5695),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("00bdf40c-870a-42a5-a3be-0208d133edca"),
                            Name = "7D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("30bfc842-9b50-4a8e-8347-13a346c56484"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5707),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("5911a2bb-5811-4362-90c1-abcb125c0fde"),
                            Name = "8D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("93390daa-f6c8-4f77-93eb-645f00be7480"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5721),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("f2d1e8e9-258e-4dd1-b1f2-9b4b94b655ea"),
                            Name = "9D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("37f4335a-56df-4bfe-b7ad-4ef3d5c7c856"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5733),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("fe0900ac-8d15-46ce-8891-1f1160cdc507"),
                            Name = "10D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983")
                        },
                        new
                        {
                            Id = new Guid("64ba7397-8448-40bd-9c88-e344ed84365b"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5745),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("62ad02b9-c784-4eba-bf9c-d672a19bfb72"),
                            Name = "Classic Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("70da8673-bb77-4a49-80bb-d893f85ddcd3")
                        },
                        new
                        {
                            Id = new Guid("f7d099f9-7876-4027-a569-cd0c87240586"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5758),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("15303be6-ff19-444f-808f-9138f3ab7683"),
                            Name = "Volume Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("70da8673-bb77-4a49-80bb-d893f85ddcd3")
                        },
                        new
                        {
                            Id = new Guid("1de24c0e-4169-430b-b34b-cb330b15cd43"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5788),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("15303be6-ff19-444f-808f-9138f3ab7683"),
                            Name = "Classic Eye Brow lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("70da8673-bb77-4a49-80bb-d893f85ddcd3")
                        },
                        new
                        {
                            Id = new Guid("45a40bf9-fbdb-455f-9ebb-97ef16342817"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5803),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("6bbf7b0b-e224-4b79-888f-7543abf59410"),
                            Name = "Volume Eye Brow Lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("70da8673-bb77-4a49-80bb-d893f85ddcd3")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0eea9506-3887-4b46-b6f7-dfbd463be983"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("70da8673-bb77-4a49-80bb-d893f85ddcd3"),
                            Name = "Eye Brow Shaping"
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceShowCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80796371-d14a-4975-b347-149cae0e4c12"),
                            Created = new DateTime(2025, 1, 24, 0, 32, 44, 150, DateTimeKind.Utc).AddTicks(5825),
                            ServiceId = new Guid("311f4f1f-ea70-484f-87e1-d34d832d7180")
                        });
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasHadEyeProblems4Weeks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSensitiveSkin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaiverAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WearsContanctLenses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentProduct", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.Product", "Product")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.AppointmentService", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Products")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JricaStudioWebAPI.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductShowcase", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Services")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ServiceShowCase", b =>
                {
                    b.HasOne("JricaStudioWebAPI.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentProducts");

                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ImageUpload", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Product", b =>
                {
                    b.Navigation("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebAPI.Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}

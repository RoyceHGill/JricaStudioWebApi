// <auto-generated />
using System;
using JricaStudioWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JricaStudioWebApi.Migrations
{
    [DbContext(typeof(JaysLashesDbContext))]
    [Migration("20241206230025_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("JricaStudioWebApi.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AdminKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResetKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ResetKeySent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e0fb1f1-0a06-4e53-82ba-145e237358da"),
                            AdminKey = new Guid("3406dc36-e888-4d89-9ce0-5540633f64c8"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8918),
                            FirstName = "Jayrica",
                            LastName = "Cunanan",
                            Password = "$2a$11$MQNFw0GnW1QPsOVHLxQPjukU77yqRAp.cAFQ7z2.LPDAvdswvRdyi",
                            Phone = "0422453888",
                            ResetKey = new Guid("00000000-0000-0000-0000-000000000000"),
                            ResetKeySent = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "jricastudio@gmail.com"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHadEyelashExtentions")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDepositPaid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSampleSetComplete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SampleSetCompleted")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.BlockOutDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BlockOutDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a2213a69-37c6-41e7-8b84-5491c23c47f5"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9438),
                            Date = new DateOnly(2024, 12, 8)
                        },
                        new
                        {
                            Id = new Guid("aaa1d54c-25ff-4bfb-8ed3-ff76172ea3a5"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9464),
                            Date = new DateOnly(2024, 12, 10)
                        },
                        new
                        {
                            Id = new Guid("47396174-21e8-4175-9eb2-f36e0f948fb3"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9493),
                            Date = new DateOnly(2024, 12, 12)
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.BusinessHours", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AfterHoursGraceRange")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("LocalTimeOffset")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BusinessHours");

                    b.HasData(
                        new
                        {
                            Id = new Guid("196e21ee-e456-4dd3-b416-fc8a20cf27e8"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(8724),
                            Day = 0,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8162bff2-49fa-4b9c-98b2-8153d6735542"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(8815),
                            Day = 1,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("12ed3d64-594f-490a-a85f-add548bcb371"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(8828),
                            Day = 2,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1dfa0064-f3a1-4dcc-ab15-c3019bb03694"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(8840),
                            Day = 3,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("1fb86cc3-52a1-495d-aab0-cecc1f1ea388"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(8851),
                            Day = 4,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("76a4d3fc-2b68-45f6-993d-ea4013088910"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(8865),
                            Day = 5,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("28cc5c14-5371-49cc-b325-e51f5f5963ff"),
                            AfterHoursGraceRange = 2,
                            CloseTime = new TimeOnly(7, 0, 0),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(8875),
                            Day = 6,
                            IsDisabled = false,
                            LocalTimeOffset = new TimeSpan(0, 10, 0, 0, 0),
                            OpenTime = new TimeOnly(23, 0, 0)
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ImageUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ImageUploads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d476c346-d3f1-4294-96c2-5daadb45504e"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8282),
                            FileName = "TestImage0",
                            StoredFileName = "1nfgmnyz.bl2"
                        },
                        new
                        {
                            Id = new Guid("26c03dbf-9ced-4236-b7e1-6829c9239130"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8324),
                            FileName = "TestImage1",
                            StoredFileName = "1r4zqyu0.gi4"
                        },
                        new
                        {
                            Id = new Guid("c7d67191-5ff4-42e2-8caf-6dae0d33a0f8"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8336),
                            FileName = "TestImage2",
                            StoredFileName = "3eq2p4lu.qa4"
                        },
                        new
                        {
                            Id = new Guid("39b06fa9-7431-4ed2-9645-a1cf1b4bc45b"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8347),
                            FileName = "TestImage3",
                            StoredFileName = "gaxx0wp3.shv"
                        },
                        new
                        {
                            Id = new Guid("86690a51-247a-4621-b1db-abc6423ca4c1"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8358),
                            FileName = "TestImage4",
                            StoredFileName = "kmg5yef0.sur"
                        },
                        new
                        {
                            Id = new Guid("08671e08-861a-4a26-8d71-c2e6036ca4d5"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8374),
                            FileName = "TestImage5",
                            StoredFileName = "tcpkt35n.gr2"
                        },
                        new
                        {
                            Id = new Guid("aa0d082d-8233-4ae6-b5b1-593c0261b96b"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8386),
                            FileName = "TestImage6",
                            StoredFileName = "tzfm3wxw.gs0"
                        },
                        new
                        {
                            Id = new Guid("8d6386ac-2456-46fb-97fc-481ad7affee3"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8397),
                            FileName = "TestImage7",
                            StoredFileName = "uwvxthvt.goa"
                        },
                        new
                        {
                            Id = new Guid("b579f16b-9481-40ae-aca0-1a85f77e792e"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8409),
                            FileName = "TestImage8",
                            StoredFileName = "zocriik1.vc2"
                        },
                        new
                        {
                            Id = new Guid("8f29696f-bd0f-43d4-908b-0d138329c0c9"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8427),
                            FileName = "TestImage9",
                            StoredFileName = "zunfse5i.1zu"
                        },
                        new
                        {
                            Id = new Guid("713a415c-40ab-486f-ba8f-808333538a6f"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8855),
                            FileName = "TestImage0",
                            StoredFileName = "0vqtv5tb.w0h"
                        },
                        new
                        {
                            Id = new Guid("041c6602-1a32-4c84-a057-b96db3cfdaf8"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8869),
                            FileName = "TestImage1",
                            StoredFileName = "axlbdjel.hyc"
                        },
                        new
                        {
                            Id = new Guid("a17297b8-2320-4790-a89d-f7c9a954b691"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8881),
                            FileName = "TestImage2",
                            StoredFileName = "lrc1hkcq.ljd"
                        },
                        new
                        {
                            Id = new Guid("0872f471-2e73-4c4f-b305-88550d37aaf2"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8893),
                            FileName = "TestImage3",
                            StoredFileName = "ncn0uwbu.bom"
                        },
                        new
                        {
                            Id = new Guid("0a917f53-d153-40d9-8516-0db0db0f1780"),
                            ContentType = "image",
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 729, DateTimeKind.Utc).AddTicks(8904),
                            FileName = "TestImage4",
                            StoredFileName = "xzu2yu4v.njt"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyArticle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolicyTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7250a8aa-7514-4516-bb32-547295b72ac4"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(8972),
                            Description = "Description",
                            ImageUploadId = new Guid("a17297b8-2320-4790-a89d-f7c9a954b691"),
                            Name = "Aveeno Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("ac0e012a-ad7f-4e8e-bbad-ff3e8ffbb53f"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("f7f19deb-2203-4c53-8337-0fc2f84fa46c"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9027),
                            Description = "Description",
                            ImageUploadId = new Guid("0872f471-2e73-4c4f-b305-88550d37aaf2"),
                            Name = "Vaseline Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("ac0e012a-ad7f-4e8e-bbad-ff3e8ffbb53f"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("ff9253ad-ba8a-448a-bd46-132798906631"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9040),
                            Description = "Description",
                            ImageUploadId = new Guid("0872f471-2e73-4c4f-b305-88550d37aaf2"),
                            Name = "Nivea Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("ac0e012a-ad7f-4e8e-bbad-ff3e8ffbb53f"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("3b44b5f9-1dea-4499-833c-73235775977e"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9053),
                            Description = "Description",
                            ImageUploadId = new Guid("041c6602-1a32-4c84-a057-b96db3cfdaf8"),
                            Name = "Curel Body Lotion",
                            Price = 10.95m,
                            ProductCategoryId = new Guid("ac0e012a-ad7f-4e8e-bbad-ff3e8ffbb53f"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("cb808d2c-a43f-4271-a199-ae420c2afbff"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9066),
                            Description = "Description",
                            ImageUploadId = new Guid("713a415c-40ab-486f-ba8f-808333538a6f"),
                            Name = "Classic Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("e419294e-2d16-46de-9d37-f71bbac55ca7"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("8f50546a-06ca-4cec-bba0-c401efc6597e"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9078),
                            Description = "Description",
                            ImageUploadId = new Guid("a17297b8-2320-4790-a89d-f7c9a954b691"),
                            Name = "Volume Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("e419294e-2d16-46de-9d37-f71bbac55ca7"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("85558091-6d75-4405-9ee5-7ef30c6687ba"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9135),
                            Description = "Description",
                            ImageUploadId = new Guid("0872f471-2e73-4c4f-b305-88550d37aaf2"),
                            Name = "Wet Look Style Eyelash Extensions",
                            Price = 30.60m,
                            ProductCategoryId = new Guid("e419294e-2d16-46de-9d37-f71bbac55ca7"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("18cbb031-74cc-4b49-8a4c-a5b4dda30170"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9149),
                            Description = "Description",
                            ImageUploadId = new Guid("041c6602-1a32-4c84-a057-b96db3cfdaf8"),
                            Name = "3D Style Eyelash Extensions",
                            Price = 35.60m,
                            ProductCategoryId = new Guid("e419294e-2d16-46de-9d37-f71bbac55ca7"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e419294e-2d16-46de-9d37-f71bbac55ca7"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("ac0e012a-ad7f-4e8e-bbad-ff3e8ffbb53f"),
                            Name = "Lotion"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductShowcase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bb25e7a-987f-42f4-8ff7-ec3bedf4770b"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9512),
                            ProductId = new Guid("cb808d2c-a43f-4271-a199-ae420c2afbff")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageUploadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageUploadId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bffcdd56-5ffd-470b-9bfb-1b8493758bfd"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9170),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("39b06fa9-7431-4ed2-9645-a1cf1b4bc45b"),
                            Name = "2D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("70489aec-a433-4d7c-8495-95d031470e26"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9206),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("8d6386ac-2456-46fb-97fc-481ad7affee3"),
                            Name = "3D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("f95b206d-cf66-4aff-b848-9bfebc576c31"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9219),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("8d6386ac-2456-46fb-97fc-481ad7affee3"),
                            Name = "4D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("d1ca79be-3c9b-488a-9b01-1b42cc0c4c93"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9232),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("08671e08-861a-4a26-8d71-c2e6036ca4d5"),
                            Name = "5D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("c8f908e2-4f4a-45e8-8a5e-509e6e7b0947"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9245),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("26c03dbf-9ced-4236-b7e1-6829c9239130"),
                            Name = "6D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("1f45cbf8-99ab-4247-a07a-468ed79f458d"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9267),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("8d6386ac-2456-46fb-97fc-481ad7affee3"),
                            Name = "7D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("e77e959f-50a1-4b7f-8e49-d7890ad9ae18"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9286),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("d476c346-d3f1-4294-96c2-5daadb45504e"),
                            Name = "8D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("bdb17bc1-cb5e-43c5-b81e-218e37a948f0"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9309),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("08671e08-861a-4a26-8d71-c2e6036ca4d5"),
                            Name = "9D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("f039a117-93b9-4d4f-bee7-07196491a6bd"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9329),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("39b06fa9-7431-4ed2-9645-a1cf1b4bc45b"),
                            Name = "10D Lashes Infill",
                            Price = 120m,
                            ServiceCategoryId = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30")
                        },
                        new
                        {
                            Id = new Guid("cb5fb109-d92e-4da4-ad0c-520c8295bcfa"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9348),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("aa0d082d-8233-4ae6-b5b1-593c0261b96b"),
                            Name = "Classic Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("2f86ab85-ed62-4db9-a3ad-6b4760440ed8")
                        },
                        new
                        {
                            Id = new Guid("34b74d74-535d-4469-a617-327fafcc5c8a"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9368),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("c7d67191-5ff4-42e2-8caf-6dae0d33a0f8"),
                            Name = "Volume Eye Brow Trim and Shape",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("2f86ab85-ed62-4db9-a3ad-6b4760440ed8")
                        },
                        new
                        {
                            Id = new Guid("89129b41-3359-460f-8af2-159bfe430a0a"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9385),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("aa0d082d-8233-4ae6-b5b1-593c0261b96b"),
                            Name = "Classic Eye Brow lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("2f86ab85-ed62-4db9-a3ad-6b4760440ed8")
                        },
                        new
                        {
                            Id = new Guid("aa97bd1d-929c-4cb0-9df8-e15b76e0177d"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9399),
                            Description = "Description",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            ImageUploadId = new Guid("8d6386ac-2456-46fb-97fc-481ad7affee3"),
                            Name = "Volume Eye Brow Lamination",
                            Price = 90.00m,
                            ServiceCategoryId = new Guid("2f86ab85-ed62-4db9-a3ad-6b4760440ed8")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb94f68a-e464-4c21-bb67-4101b2991a30"),
                            Name = "Eye Lash Extensions"
                        },
                        new
                        {
                            Id = new Guid("2f86ab85-ed62-4db9-a3ad-6b4760440ed8"),
                            Name = "Eye Brow Shaping"
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceShowCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesShowcases");

                    b.HasData(
                        new
                        {
                            Id = new Guid("316a8c48-00df-4940-8552-512fed889211"),
                            Created = new DateTime(2024, 12, 6, 23, 0, 24, 818, DateTimeKind.Utc).AddTicks(9415),
                            ServiceId = new Guid("bffcdd56-5ffd-470b-9bfb-1b8493758bfd")
                        });
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasHadEyeProblems4Weeks")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasSensitiveSkin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaiverAcknowledged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WearsContanctLenses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentProduct", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.Product", "Product")
                        .WithMany("AppointmentProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.AppointmentService", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Products")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JricaStudioWebApi.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductShowcase", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.ImageUpload", "ImageUpload")
                        .WithMany("Services")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ImageUpload");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ServiceShowCase", b =>
                {
                    b.HasOne("JricaStudioWebApi.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentProducts");

                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ImageUpload", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Product", b =>
                {
                    b.Navigation("AppointmentProducts");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("JricaStudioWebApi.Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
